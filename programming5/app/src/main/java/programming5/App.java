/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package programming5;

import java.util.Arrays;
import java.util.Random;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        var a = collectData(10);
        System.out.println("Random Array unsorted:  " + Arrays.toString(a));
        System.out.println("Insertion Sorted Array: " + Arrays.toString(insertionSort(a)));
        System.out.println("Merge Sorted Array:     " + Arrays.toString(mergeSort(a)));
    }

    public static int[] collectData(int length) {
        Random random = new Random(0);
        int[] g = new int[length];
        for (int i = 0; i < g.length; i++) {
            g[i] = random.nextInt(100);
        }
        return g;
    }

    public static int[] insertionSort(int[] a) {
        for (int j = 1; j < a.length; j++) {
            int key = a[j];

            // Insert A[j] into the sorted sequence A[I..j-1]
            int i = j - 1;
            while (i > -1 && a[i] > key) {
                a[i + 1] = a[i];
                i = i - 1;
            }
            a[i + 1] = key;
        }
        return a;
    }

    public static int[] mergeSort(int[] arr) {
        sort(arr, 0, arr.length - 1);
        return arr;
    }

    static void merge(int arr[], int l, int m, int r) {
        // Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;

        /* Create temp arrays */
        int L[] = new int[n1];
        int R[] = new int[n2];

        /* Copy data to temp arrays */
        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];

        /* Merge the temp arrays */

        // Initial indexes of first and second subarrays
        int i = 0, j = 0;

        // Initial index of merged subarray array
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        /* Copy remaining elements of L[] if any */
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        /* Copy remaining elements of R[] if any */
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    // Main function that sorts arr[l..r] using
    // merge()
    static void sort(int arr[], int l, int r) {
        if (l < r) {
            // Find the middle point
            int m = l + (r - l) / 2;

            // Sort first and second halves
            sort(arr, l, m);
            sort(arr, m + 1, r);

            // Merge the sorted halves
            merge(arr, l, m, r);
        }
    }
}
